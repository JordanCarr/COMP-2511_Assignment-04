{"version":3,"sources":["../../js/functionality.js"],"names":["myCardValues","selectedCards","valueToBeat","playerTurnValue","$","document","ready","submit","e","loadPlayers","loadCards","setupEndGame","preventDefault","html","val","playerTurn","playerNumber","playerMoveElement","post","done","data","deck","parseJSON","Cards","value","i","length","cardIndex","card","click","cardSetup","css","target","id","substr","selectCard","console","log","window","location","reload"],"mappings":"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","file":"functionality.js","sourcesContent":["/**\r\n * Created by Jordan Carr on 2017-03-28.\r\n */\r\nlet myCardValues = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\nlet selectedCards = [false, false, false, false, false, false, false, false, false, false];\r\nlet valueToBeat = 0;\r\nlet playerTurnValue = 0;\r\n\r\n$(document).ready(function () {\r\n\r\n    // On player name submission setup game with players, cards, etc...\r\n    $(\"form.newGameForm\").submit(function (e) {\r\n        loadPlayers();\r\n        loadCards();\r\n        setupEndGame();\r\n        e.preventDefault();\r\n    });\r\n});\r\n\r\n// Set player display to show input names and initialise player 1's turn\r\nfunction loadPlayers() {\r\n    $(\"#PlayerOneNameDisplay\").html($(\"#playerOneName\").val());\r\n    $(\"#PlayerTwoNameDisplay\").html($(\"#playerTwoName\").val());\r\n\r\n    //Game starts with player 1's turn\r\n    playerTurn(1);\r\n\r\n    $(\"#Move\").html(valueToBeat);\r\n}\r\n\r\nfunction playerTurn(playerNumber) {\r\n    const playerMoveElement = $(\"#PlayerMove\");\r\n    playerMoveElement.html(`Player ${playerNumber}, value to beat: `);\r\n}\r\n\r\nfunction loadCards() {\r\n    $.post(\"http://ins.mtroyal.ca/~nkhemka/test/process.php\").done(function (data) {\r\n        // convert POST response to a JAVASCRIPT OBJECT/variable\r\n        const deck = $.parseJSON(data);\r\n        valueToBeat = deck.Cards[0].value;\r\n        // putting all 10 card values from POST into the ARRAY- this is our game memory\r\n        for (let i = 0; i < myCardValues.length; i++) {\r\n            myCardValues[i] = deck.Cards[i + 1].value;\r\n        }\r\n        // we are creating events for each card -- the way you will identify what card you have clicked\r\n        for (let cardIndex = 0; cardIndex < myCardValues.length; cardIndex++) {\r\n            const card = $(\"#Card\" + cardIndex);\r\n            card.html(myCardValues[cardIndex]);\r\n            card.click(cardSetup);\r\n        }\r\n    });\r\n\r\n    $(\".cardArea\").css(\"visibility\", \"visible\");\r\n}\r\n\r\nfunction cardSetup(e) {\r\n    const cardIndex = e.target.id.substr(4, 1);\r\n    const card = $(e.target);\r\n    selectCard(cardIndex, card);\r\n    console.log(\"You clicked card: \" + cardIndex);\r\n    console.log(\"This card has a value of: \" + myCardValues[cardIndex])\r\n}\r\n\r\nfunction selectCard(cardIndex, card) {\r\n    // Store Card Selected Value\r\n    switch (selectedCards[cardIndex]) {\r\n        case true:\r\n            selectedCards[cardIndex] = false;\r\n            break;\r\n        case false:\r\n            selectedCards[cardIndex] = true;\r\n            break;\r\n    }\r\n\r\n    // Change Colour\r\n    switch (card.css(\"background-color\")) {\r\n        // blue = #0288D1, rgb(2, 136, 209)\r\n        // red  = #F44336, rgb(244, 67, 54)\r\n        case \"rgb(2, 136, 209)\": // blue\r\n            card.css(\"background-color\", \"#F44336\"); // red\r\n            break;\r\n        case \"rgb(244, 67, 54)\": // red\r\n            card.css(\"background-color\", \"\"); //un-sets colour\r\n            break;\r\n    }\r\n}\r\n\r\nfunction setupEndGame() {\r\n    $(\"#EndGameButton\").click(function () {\r\n        window.location.reload();\r\n    });\r\n}\r\n"]}