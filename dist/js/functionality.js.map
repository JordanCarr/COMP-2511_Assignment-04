{
  "version": 3,
  "sources": [
    "../../js/functionality.js"
  ],
  "names": [
    "cardValues",
    "selectedCards",
    "valueToBeat",
    "playerTurnValue",
    "playerName",
    "$",
    "document",
    "ready",
    "submit",
    "loadPlayers",
    "setupEndGame",
    "e",
    "preventDefault",
    "setupTopArea",
    "remove",
    "css",
    "val",
    "html",
    "setupPlayerTurn",
    "playerNumber",
    "loadCards",
    "post",
    "done",
    "deck",
    "parseJSON",
    "data",
    "Cards",
    "value",
    "i",
    "length",
    "cardIndex",
    "card",
    "resetCard",
    "click",
    "cardSetup",
    "playerTurn",
    "off",
    "setupEndTurn",
    "target",
    "id",
    "substr",
    "selectCard",
    "console",
    "log",
    "alert",
    "window",
    "location",
    "reload",
    "sumOfSelectedCards",
    "sum",
    "changeTurn",
    "endTurnButton",
    "endTurn",
    "playerScoreDisplay",
    "currentScore",
    "parseInt",
    "resetSelected",
    "map"
  ],
  "mappings": "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",
  "file": "functionality.js",
  "sourcesContent": [
    "/**\r\n * Created by Jordan Carr on 2017-03-28.\r\n */\r\nlet cardValues = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\nlet selectedCards = [false, false, false, false, false, false, false, false, false, false];\r\nlet valueToBeat = 0;\r\nlet playerTurnValue = 0;\r\nlet playerName = [\"\", \"\"];\r\n\r\n$(document).ready(() => {\r\n    // On player name submission setup game with players, cards, etc...\r\n    $(\"form.newGameForm\").submit(e => {\r\n        loadPlayers();\r\n        setupEndGame();\r\n        e.preventDefault();\r\n        setupTopArea();\r\n    });\r\n});\r\n\r\nfunction setupTopArea() {\r\n    $(\"#NewGame\").remove();\r\n    $(\"#Score\").css(\"width\", \"33%\");\r\n    $(\".scoreBoard div:nth-child(2n)\").css(\"width\", \"50%\");\r\n    $(\".scoreBoard div:not(:nth-child(2n))\").css(\"width\", \"50%\");\r\n    $(\"#ValueToReach\").css(\"width\", \"34%\");\r\n    $(\"#EndGame\").css(\"width\", \"33%\");\r\n}\r\n\r\n// Set player display to show input names and initialise player 1's turn\r\nfunction loadPlayers() {\r\n    playerName[0] = $(\"#Player1Name\").val();\r\n    playerName[1] = $(\"#Player2Name\").val();\r\n    $(\"#Player1NameDisplay\").html(playerName[0]);\r\n    $(\"#Player2NameDisplay\").html(playerName[1]);\r\n\r\n    //Game starts with player 1's turn which has an index of 0\r\n    setupPlayerTurn(playerTurnValue);\r\n}\r\n\r\nfunction setupPlayerTurn(playerNumber) {\r\n    loadCards(playerNumber);\r\n}\r\n\r\nfunction loadCards(playerNumber) {\r\n    $.post(\"http://ins.mtroyal.ca/~nkhemka/test/process.php\").done(data => {\r\n        // convert POST response to a JAVASCRIPT OBJECT/variable\r\n        const deck = $.parseJSON(data);\r\n        /** @namespace deck.Cards */\r\n        valueToBeat = deck.Cards[0].value;\r\n        // putting all 10 card values from POST into the ARRAY- this is our game memory\r\n        for (let i = 0; i < cardValues.length; i++) {\r\n            cardValues[i] = deck.Cards[i + 1].value;\r\n        }\r\n        // we are creating events for each card -- the way you will identify what card you have clicked\r\n        for (let cardIndex = 0; cardIndex < cardValues.length; cardIndex++) {\r\n            const card = $(\"#Card\" + cardIndex);\r\n            card.html(cardValues[cardIndex]);  //TODO make cards have separate images\r\n            resetCard(card);\r\n            card.click(cardSetup);\r\n        }\r\n        playerTurn(playerNumber);\r\n        $(\".cardArea\").css(\"visibility\", \"visible\");\r\n    });\r\n}\r\n\r\nfunction resetCard(card) {\r\n    card.off(\"click\", cardSetup);\r\n    card.css(\"background-color\", \"\");\r\n}\r\n\r\nfunction playerTurn(playerNumber) {\r\n    setupEndTurn();\r\n    $(\"#PlayerMove\").html(`${playerName[playerNumber]}, value to beat: `);\r\n    $(\"#Move\").html(valueToBeat);\r\n}\r\n\r\nfunction cardSetup(e) {\r\n    const cardIndex = e.target.id.substr(4, 1);\r\n    const card = $(e.target);\r\n    selectCard(cardIndex, card);\r\n    console.log(\"You clicked card: \" + cardIndex);\r\n    console.log(\"This card has a value of: \" + cardValues[cardIndex])\r\n}\r\n\r\nfunction selectCard(cardIndex, card) {\r\n    // Store Card Selected Value\r\n    selectedCards[cardIndex] = !selectedCards[cardIndex];\r\n    // Change Colour\r\n    switch (card.css(\"background-color\")) {\r\n        // blue = #0288D1, rgb(2, 136, 209)\r\n        // red  = #F44336, rgb(244, 67, 54)\r\n        case \"rgb(2, 136, 209)\": // blue\r\n            card.css(\"background-color\", \"#F44336\"); // red\r\n            break;\r\n        case \"rgb(244, 67, 54)\": // red\r\n            card.css(\"background-color\", \"\"); //un-sets colour\r\n            break;\r\n        default:\r\n            alert(\"Something went horribly wrong with the style sheet. Reloading\");\r\n            window.location.reload();\r\n    }\r\n}\r\n\r\nfunction sumOfSelectedCards() {\r\n    let sum = 0;\r\n    for (let i = 0; i < selectedCards.length; i++) {\r\n        if (true === selectedCards[i]) {\r\n            sum += cardValues[i];\r\n        }\r\n    }\r\n    return sum;\r\n}\r\n\r\nfunction changeTurn() {\r\n    playerTurnValue = (playerTurnValue + 1) % 2\r\n}\r\n\r\nfunction setupEndTurn() {\r\n    let endTurnButton = $(\"#EndTurnButton\");\r\n    endTurnButton.off(\"click\", endTurn);\r\n    endTurnButton.click(endTurn)\r\n}\r\n\r\nfunction endTurn() {\r\n    let sum = sumOfSelectedCards();\r\n    if (sum > valueToBeat) {\r\n        let playerScoreDisplay = $(`#Player${playerTurnValue + 1}ScoreDisplay`);\r\n        let currentScore = playerScoreDisplay.html();\r\n        playerScoreDisplay.html(parseInt(currentScore) + 10);\r\n        changeTurn();\r\n        alert(`You are correct, you score 10 points, now it's ${playerName[playerTurnValue]}'s turn`);\r\n        setupPlayerTurn(playerTurnValue)\r\n    } else {\r\n        changeTurn();\r\n        alert(`You are incorrect, you score 0 points, now it's ${playerName[playerTurnValue]}'s turn`);\r\n        setupPlayerTurn(playerTurnValue)\r\n    }\r\n    resetSelected()\r\n}\r\n\r\nfunction resetSelected() {\r\n    selectedCards.map(card => false);\r\n}\r\n\r\nfunction setupEndGame() {\r\n    $(\"#EndGameButton\").click(() => window.location.reload());\r\n}\r\n"
  ]
}